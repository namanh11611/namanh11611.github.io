<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Clean Code on Henry Techie</title><link>https://namanh11611.github.io/tags/clean-code/</link><description>Recent content in Clean Code on Henry Techie</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 01 May 2024 00:00:00 +0700</lastBuildDate><atom:link href="https://namanh11611.github.io/tags/clean-code/index.xml" rel="self" type="application/rss+xml"/><item><title>3 Ways I Apply to Write Cleaner and Tidier Code</title><link>https://namanh11611.github.io/p/clean-code/</link><pubDate>Wed, 01 May 2024 00:00:00 +0700</pubDate><guid>https://namanh11611.github.io/p/clean-code/</guid><description>&lt;img src="https://namanh11611.github.io/p/clean-code/tidy.webp" alt="Featured image of post 3 Ways I Apply to Write Cleaner and Tidier Code" />&lt;p>&lt;strong>Clean Code&lt;/strong> is probably a classic topic in programming. I once mentioned the book &lt;strong>Clean Code&lt;/strong> by &lt;strong>Uncle Bob&lt;/strong> in the article &lt;a class="link" href="../junior" >&lt;strong>Things I Wish I Knew When I Was a Junior&lt;/strong>&lt;/a>. However, this time I won&amp;rsquo;t rewrite the contents of that bookâ€”you should read it directly for the best experience. I just want to share a few tips that I often use to keep my code &lt;strong>tidy and clean&lt;/strong>.&lt;/p>
&lt;h1 id="use-return-to-avoid-ifelse-hell">Use return to avoid if/else hell
&lt;/h1>&lt;p>Have you ever encountered &lt;strong>if/else hell&lt;/strong> like this in your code?&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">doFirstTask&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">doSecondTask&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">isNotEmpty&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">doThirdTask&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In theory, the above code is fine. But I don&amp;rsquo;t like looking at code with so many nested layers. So I often use &lt;code>return&lt;/code> to avoid writing too many nested braces &lt;code>{}&lt;/code>. We can refactor the code above as follows:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">doFirstTask&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">doSecondTask&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">condition3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="p">())&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">return&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">doThirdTask&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The logic is equivalent, but the meaning is slightly different. In the first case, when your colleague reads the code, they&amp;rsquo;ll understand: &lt;em>&amp;ldquo;If this condition is met, the code will continue to process like this.&amp;rdquo;&lt;/em> In the second case, they&amp;rsquo;ll understand: &lt;em>&amp;ldquo;If this condition is not met, the code will not continue.&amp;rdquo;&lt;/em> Thinking in the second way can sometimes feel a bit reversed, so &lt;strong>apply this tip as appropriate&lt;/strong>, don&amp;rsquo;t use it mechanically in all cases.&lt;/p>
&lt;h1 id="use-map-or-set-instead-of-list">Use Map or Set instead of List
&lt;/h1>&lt;p>&lt;strong>Map&lt;/strong> and &lt;strong>Set&lt;/strong> are two special data structures that you probably learned in university. However, in projects, people often always use &lt;strong>List&lt;/strong> because it&amp;rsquo;s &amp;ldquo;convenient.&amp;rdquo; For me, before choosing a data type for a list, I always ask whether using Map or Set would make the &lt;strong>code shorter&lt;/strong> and &lt;strong>improve performance&lt;/strong>. If yes, I definitely &lt;strong>prioritize these two types&lt;/strong>.&lt;/p>
&lt;p>For example, I have a variable &lt;code>existingValueList&lt;/code> which is a list of existing values. When a user enters a new value, I need to check if it already exists, and if so, return an error. If &lt;code>existingValueList&lt;/code> is a &lt;code>List&lt;/code>, I&amp;rsquo;d write the check like this:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isExisting&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">existingValueList&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>But if it&amp;rsquo;s a Set, we&amp;rsquo;d write:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">boolean&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">isExisting&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">existingValueSet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="na">contains&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;em>&amp;ldquo;So, what&amp;rsquo;s the difference?&amp;rdquo;&lt;/em> The way you write it is the same, but the difference lies in the &lt;code>contains()&lt;/code> method: the runtime for &lt;code>List&lt;/code> is &lt;code>O(n)&lt;/code>, while for &lt;code>Set&lt;/code> it&amp;rsquo;s only &lt;code>O(1)&lt;/code>.&lt;/p>
&lt;p>99% of you probably know this, but sometimes you use &lt;strong>List&lt;/strong> out of habit. So next time, before creating a &lt;strong>List&lt;/strong>, pause for a moment to consider whether you should use &lt;strong>Map&lt;/strong> or &lt;strong>Set&lt;/strong>.&lt;/p>
&lt;p>There are also other data structures like &lt;strong>Stack&lt;/strong>, &lt;strong>Queue&lt;/strong>, &lt;strong>Tree&lt;/strong>&amp;hellip; But in real projects, I rarely encounter use-cases for these.&lt;/p>
&lt;h1 id="dont-comment-out-unused-codejust-delete-it">Don&amp;rsquo;t comment out unused codeâ€”just delete it
&lt;/h1>&lt;p>I&amp;rsquo;ve noticed some people have the habit of &lt;strong>commenting out old code&lt;/strong> when modifying a feature instead of deleting it. Or there are &lt;strong>old functions that are no longer used&lt;/strong>, but they don&amp;rsquo;t bother to comment or delete them, just leaving them there forever. But trust me, &lt;strong>a few months&lt;/strong> or even &lt;strong>a few years&lt;/strong> later, you&amp;rsquo;ll probably never uncomment that code again. A few lines each time, but over the years it becomes a mountain of &lt;strong>dead code&lt;/strong>.&lt;/p>
&lt;p>If you want to review old code, &lt;a class="link" href="../git-process" >&lt;strong>Git&lt;/strong>&lt;/a> can help you very well. So be bold and delete itâ€”not just &lt;strong>a few lines of code&lt;/strong>, &lt;strong>a function&lt;/strong>, but also any &lt;strong>resources&lt;/strong> of the app that you no longer use. This will help reduce your source code size significantly.&lt;/p>
&lt;p>If you have any cool tips that you use, please share them with me!&lt;/p></description></item></channel></rss>