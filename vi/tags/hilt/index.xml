<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hilt on Henry Techie</title><link>https://namanh11611.github.io/vi/tags/hilt/</link><description>Recent content in Hilt on Henry Techie</description><generator>Hugo -- gohugo.io</generator><language>vi</language><lastBuildDate>Sun, 02 Oct 2022 01:33:00 +0700</lastBuildDate><atom:link href="https://namanh11611.github.io/vi/tags/hilt/index.xml" rel="self" type="application/rss+xml"/><item><title>Khi nào nên dùng Inject, Provides, Binds trong Hilt</title><link>https://namanh11611.github.io/vi/p/hilt/</link><pubDate>Sun, 02 Oct 2022 01:33:00 +0700</pubDate><guid>https://namanh11611.github.io/vi/p/hilt/</guid><description>&lt;img src="https://namanh11611.github.io/p/hilt/hilt.webp" alt="Featured image of post Khi nào nên dùng Inject, Provides, Binds trong Hilt" />&lt;p>Bài viết này mình sẽ đi thẳng vào giải thích cách dùng các annotation &lt;code>@Inject&lt;/code>, &lt;code>@Provides&lt;/code> và &lt;code>@Binds&lt;/code>. Vậy nên bỏ qua phần giải thích về Dependency Injection hay giới thiệu về &lt;code>Hilt&lt;/code>. Coi như mọi người đã biết cách dùng nó rồi nhé. Chiến thôi!!!&lt;/p>
&lt;h1 id="tổng-quan">Tổng quan
&lt;/h1>&lt;p>Chúng ta có 3 annotation thường dùng để inject các object trong Hilt:&lt;/p>
&lt;ul>
&lt;li>&lt;code>@Inject&lt;/code>: annotation dùng ở constructor của class&lt;/li>
&lt;li>&lt;code>@Provides&lt;/code>: annotation dùng ở Module&lt;/li>
&lt;li>&lt;code>@Binds&lt;/code>: một annotation khác cũng dùng ở Module&lt;/li>
&lt;/ul>
&lt;p>Câu hỏi đặt ra là vậy khi nào thì dùng những thằng này nhỉ?&lt;/p>
&lt;h1 id="inject">Inject
&lt;/h1>&lt;p>Chúng ta dùng &lt;code>@Inject&lt;/code> annotation ở tất cả các constructor mà mình cần inject object, từ &lt;code>ViewModel&lt;/code>, &lt;code>Repository&lt;/code> đến &lt;code>DataSource&lt;/code>. Ví dụ:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ProfileRepository&lt;/span> &lt;span class="nd">@Inject&lt;/span> &lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">profileDataSource&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ProfileDataSource&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Việc này giúp chúng ta dễ dàng inject tiếp &lt;code>ProfileRepository&lt;/code> vào các class khác, ví dụ như &lt;code>ViewModel&lt;/code> hoặc &lt;code>UseCase&lt;/code>. Tuy nhiên thì chúng ta lại chỉ có thể sử dụng annotation này để annotate constructor của những class mà mình tự define.&lt;/p>
&lt;h1 id="provides">Provides
&lt;/h1>&lt;p>Vậy thì để khắc phục điểm yếu trên, inject object của những class mà mình không define (Ví dụ như &lt;code>Retrofit&lt;/code>, &lt;code>OkHttpClient&lt;/code> hoặc &lt;code>Room&lt;/code> database), chúng ta cùng đến với &lt;code>@Provides&lt;/code>. Trước tiên, chúng ta cần tạo một &lt;code>@Module&lt;/code> để chứa các dependency với annotation &lt;code>@Provides&lt;/code>. Ví dụ:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">NetworkModule&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Provides&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">providesApiService&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">ApiService&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nc">Retrofit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Builder&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">addConverterFactory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nc">GsonConverterFactory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">baseUrl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BASE_URL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">create&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ApiService&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vì &lt;code>Retrofit&lt;/code> khởi tạo object không phải code của chúng ta define, thêm nữa lại còn khởi tạo theo kiểu Builder pattern, nên chúng ta không thể dùng &lt;code>@Inject&lt;/code> annotation mà bắt buộc phải dùng &lt;code>@Provides&lt;/code>. Bây giờ, chúng ta đã có thể inject object của interface &lt;code>ApiService&lt;/code> ở bất cứ đâu.&lt;/p>
&lt;h1 id="binds">Binds
&lt;/h1>&lt;p>Đối với interface, chúng ta không thể dùng annotation &lt;code>@Inject&lt;/code>, vì nó không có constructor function. Tuy nhiên, nếu bạn có một interface mà chỉ có duy nhất một implementation (một class implement interface đó), thì bạn có thể dùng &lt;code>@Binds&lt;/code> để inject interface đó. Việc inject interface thay vì class là một good practice, giúp dễ dàng test hơn.&lt;/p>
&lt;p>Quay trở lại với &lt;code>ProfileRepository&lt;/code> ở phần &lt;code>@Inject&lt;/code>, chúng ta sẽ biến nó thành một interface, và tạo một class implement interface đó. Ví dụ:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">interface&lt;/span> &lt;span class="nc">ProfileRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">ProfileRepositoryImpl&lt;/span> &lt;span class="nd">@Inject&lt;/span> &lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">profileDataSource&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ProfileDataSource&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">ProfileRepository&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@Module&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nd">@InstallIn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">SingletonComponent&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="k">class&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">abstract&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">RepositoryModule&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Singleton&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nd">@Binds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">abstract&lt;/span> &lt;span class="k">fun&lt;/span> &lt;span class="nf">bindProfileRepository&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">profileRepository&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ProfileRepositoryImpl&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">ProfileRepository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">RegisterUseCase&lt;/span> &lt;span class="nd">@Inject&lt;/span> &lt;span class="k">constructor&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">private&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">profileRepository&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ProfileRepository&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ưu điểm của việc dùng &lt;code>@Binds&lt;/code> thay cho &lt;code>@Provides&lt;/code> là nó giúp giảm lượng code được generate, như là Module Factory class. Ở đây bạn có thể thấy mình vẫn dùng &lt;code>@Inject&lt;/code>, bởi vì constructor function của &lt;code>ProfileRepositoryImpl&lt;/code> vẫn cần một số parameter.&lt;/p>
&lt;h1 id="tổng-kết">Tổng kết
&lt;/h1>&lt;p>Vậy tóm gọn lại là&lt;/p>
&lt;ul>
&lt;li>Dùng &lt;code>@Inject&lt;/code> cho code của bạn&lt;/li>
&lt;li>Dùng &lt;code>@Provides&lt;/code> cho code của bên thứ 3&lt;/li>
&lt;li>Dùng &lt;code>@Binds&lt;/code> cho inject interface, giúp giảm lượng code không cần thiết&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Reference&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.android.com/training/dependency-injection/hilt-android" target="_blank" rel="noopener"
>https://developer.android.com/training/dependency-injection/hilt-android&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://dagger.dev/hilt" target="_blank" rel="noopener"
>https://dagger.dev/hilt&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.valueof.io/blog/inject-provides-binds-dependencies-dagger-hilt" target="_blank" rel="noopener"
>https://www.valueof.io/blog/inject-provides-binds-dependencies-dagger-hilt&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>