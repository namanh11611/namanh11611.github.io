<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Career on Henry Techie</title><link>https://namanh11611.github.io/categories/career/</link><description>Recent content in Career on Henry Techie</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 01 Jan 2025 00:00:00 +0700</lastBuildDate><atom:link href="https://namanh11611.github.io/categories/career/index.xml" rel="self" type="application/rss+xml"/><item><title>AI is Changing How Software Engineers Work</title><link>https://namanh11611.github.io/p/ai-change-work/</link><pubDate>Wed, 01 Jan 2025 00:00:00 +0700</pubDate><guid>https://namanh11611.github.io/p/ai-change-work/</guid><description>&lt;img src="https://namanh11611.github.io/p/ai-change-work/ai_change_work.webp" alt="Featured image of post AI is Changing How Software Engineers Work" />&lt;p>&lt;em>Photo by &lt;a class="link" href="https://unsplash.com/@altumcode?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
>AltumCode&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/silver-macbook-turned-on-XMFZqrGyV-Q?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/em>&lt;/p>
&lt;h1 id="will-ai-replace-developers-soon">Will AI Replace Developers Soon?
&lt;/h1>&lt;p>Many people have asked me whether AI is about to replace developers. My answer, as of now, is &lt;strong>NO&lt;/strong>. There still needs to be someone to &lt;strong>verify&lt;/strong> the code that AI produces.&lt;/p>
&lt;p>However, the tech industry evolves rapidly. Technologies that are &lt;strong>hot&lt;/strong> today might become obsolete tomorrow. For example, six years ago when I graduated, coding for &lt;strong>Android&lt;/strong> was primarily done using &lt;strong>Java&lt;/strong>. But now, if you only know &lt;strong>Java&lt;/strong> without &lt;strong>Kotlin&lt;/strong>, it’s incredibly difficult to find a job.&lt;/p>
&lt;p>So, will AI replace developers in the next &lt;strong>5 years&lt;/strong> or &lt;strong>10 years&lt;/strong>? I can’t say for certain.&lt;/p>
&lt;h1 id="ai-is-changing-the-way-we-work">AI is Changing the Way We Work
&lt;/h1>&lt;p>That said, it’s clear that AI is transforming &lt;strong>how we work&lt;/strong>.&lt;/p>
&lt;p>In the past, a developer’s primary job was to convert &lt;strong>requirements&lt;/strong> and &lt;strong>designs&lt;/strong> into &lt;strong>code&lt;/strong>. Tech leads and seniors would spend additional time in meetings to clarify requirements, but junior developers spent most of their time coding. It could take &lt;strong>months&lt;/strong> or even &lt;strong>years&lt;/strong> to deliver a product.&lt;/p>
&lt;p>Recently, I’ve been working on a &lt;strong>new personal project&lt;/strong>. Today marks &lt;strong>day 10&lt;/strong>, but with the help of &lt;strong>Cursor&lt;/strong>, the code I’ve written or directly modified accounts for just &lt;strong>5%&lt;/strong>.&lt;/p>
&lt;p>In the past, using &lt;strong>ChatGPT&lt;/strong>, you could only generate small components and then copy them into your project. Even then, you’d need to spend a lot of time fixing them to fit. But with &lt;strong>Cursor&lt;/strong>, it’s different. It understands the &lt;strong>project context&lt;/strong>. By providing it with a &lt;strong>base project&lt;/strong> and some &lt;strong>pre-written files&lt;/strong>, it can replicate &lt;strong>99%&lt;/strong> of the format, and the code is almost ready to use with little or no modifications.&lt;/p>
&lt;p>Cursor acts as an &lt;strong>AI Agent&lt;/strong>: after generating code, it even creates new files, runs the project to check for errors, and fixes them automatically before asking me to &lt;strong>review the changes&lt;/strong>.&lt;/p>
&lt;p>My role now resembles that of a &lt;strong>technical lead&lt;/strong>: I &lt;strong>define tasks for Cursor&lt;/strong>, review its output, and ask it to fix anything suboptimal. Once I’m satisfied, I merge the code.&lt;/p>
&lt;p>But to &lt;strong>review AI-generated code&lt;/strong>, you must understand &lt;strong>what each line means&lt;/strong> and identify what isn’t optimized so you can instruct it to make corrections. Blindly applying AI-generated solutions can be risky. If bugs arise later, you may not know how to fix them.&lt;/p>
&lt;h1 id="the-reality">The Reality
&lt;/h1>&lt;p>Currently, a barrier to adoption in &lt;strong>large companies&lt;/strong> is their hesitation to use AI due to &lt;strong>data security concerns&lt;/strong>. Additionally, their &lt;strong>codebases&lt;/strong> are vast, and using general AI tools to train on them can be &lt;strong>token-intensive&lt;/strong>. AI has limitations in the &lt;strong>number of tokens it can retain&lt;/strong>.&lt;/p>
&lt;p>For me, AI isn’t much help in my company projects. However, for &lt;strong>small companies&lt;/strong> or &lt;strong>indie hackers&lt;/strong>, these barriers are less significant, creating opportunities to &lt;strong>accelerate software development&lt;/strong>. Imagine cutting down the time to build an &lt;strong>MVP&lt;/strong> from &lt;strong>months&lt;/strong> to just &lt;strong>weeks&lt;/strong>, or even &lt;strong>days&lt;/strong>.&lt;/p>
&lt;p>The numbers don’t lie—traffic to &lt;strong>StackOverflow&lt;/strong> is declining. Developers are now asking &lt;strong>AI&lt;/strong> for help more often than they use &lt;strong>Google&lt;/strong>.&lt;/p>
&lt;p>Returning to the question at the start: if a team once required &lt;strong>3 seniors and 7 juniors&lt;/strong>, but after adopting AI, productivity improves and the team now only needs &lt;strong>3 seniors and 4 juniors&lt;/strong>, hasn’t AI effectively &lt;strong>replaced 3 juniors&lt;/strong>? More accurately, those who effectively leverage AI are taking over the roles of those who don’t.&lt;/p>
&lt;h1 id="conclusion">Conclusion
&lt;/h1>&lt;p>As the new year begins, I’m reflecting on my work so that future me can look back on this. During the &lt;strong>First Industrial Revolution&lt;/strong>, machines replaced humans in &lt;strong>tedious manual labor&lt;/strong>, freeing us to focus our intellect on other tasks. Let’s see where AI will take us in the next &lt;strong>5 years&lt;/strong> or &lt;strong>10 years&lt;/strong>.&lt;/p></description></item><item><title>Journey of Solving 555 LeetCode Problems</title><link>https://namanh11611.github.io/p/leetcode/</link><pubDate>Sun, 28 Jul 2024 00:00:00 +0700</pubDate><guid>https://namanh11611.github.io/p/leetcode/</guid><description>&lt;img src="https://namanh11611.github.io/p/leetcode/leetcode.webp" alt="Featured image of post Journey of Solving 555 LeetCode Problems" />&lt;p>&lt;em>Photo by &lt;a class="link" href="https://unsplash.com/@ashleybatz?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
>Ashley Batz&lt;/a> on &lt;a class="link" href="https://unsplash.com/photos/person-walking-on-beach-during-daytime-betmVWGYcLY?utm_content=creditCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=unsplash" target="_blank" rel="noopener"
>Unsplash&lt;/a>&lt;/em>&lt;/p>
&lt;h1 id="the-journey-begins">The Journey Begins
&lt;/h1>&lt;p>LeetCode is likely familiar to many of you—a platform for solving &lt;strong>algorithm&lt;/strong> problems and preparing for &lt;strong>coding interviews&lt;/strong>, especially for foreign companies and a few in Vietnam.&lt;/p>
&lt;p>I started my journey the same way, simply to prepare for interviews. I realized that practicing problems on LeetCode not only improved my coding skills but also gave me more confidence when facing algorithm and data structure-related interview questions.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/leetcode/leetcode_profile.webp"
width="852"
height="396"
srcset="https://namanh11611.github.io/p/leetcode/leetcode_profile_hu_1933dc0c25092f35.webp 480w, https://namanh11611.github.io/p/leetcode/leetcode_profile_hu_26e580abc5f9ea02.webp 1024w"
loading="lazy"
alt="LeetCode Profile"
class="gallery-image"
data-flex-grow="215"
data-flex-basis="516px"
>&lt;/p>
&lt;p>I began solving problems &lt;strong>by topic&lt;/strong>. This approach helped me systematically organize my knowledge and master specific types of problems. By focusing on one topic at a time, I could deepen my understanding and solve problems more efficiently. Since I didn’t specialize in Computer Science and didn’t participate in algorithm competitions during university, I could manage problems involving &lt;strong>BFS&lt;/strong>, &lt;strong>DFS&lt;/strong>, &lt;strong>Hash Table&lt;/strong>, &lt;strong>Stack&lt;/strong>, or &lt;strong>Queue&lt;/strong>, but initially struggled with topics like &lt;strong>Dynamic Programming&lt;/strong> and &lt;strong>Union Find&lt;/strong>. However, as the saying goes, &lt;em>&amp;ldquo;Practice makes perfect&amp;rdquo;&lt;/em>, after solving about ten problems, it became much easier.&lt;/p>
&lt;p>In this initial phase, I solved around &lt;strong>100 problems&lt;/strong>, which I found sufficient to interview with companies that typically ask easy-to-medium-level questions.&lt;/p>
&lt;h1 id="sustaining-as-a-hobby">Sustaining as a Hobby
&lt;/h1>&lt;p>After passing my interview and joining a good company, I stopped solving problems for about a year. Then, on a beautiful day, I felt inspired to pick it up again. During this second phase, I treated solving LeetCode problems as a daily hobby. I spent around &lt;strong>30 minutes a day&lt;/strong> solving one problem from the &lt;strong>Daily Coding Challenge&lt;/strong>. This not only helped maintain my algorithm skills but also served as a form of relaxation and self-challenge. Moreover, solving random problems daily better mimicked real-life interview scenarios.&lt;/p>
&lt;p>I usually set a 30-minute timer, and if I couldn’t figure out a solution, I’d read the &lt;strong>Editorial&lt;/strong> (solutions provided by LeetCode), then try to memorize and code it myself. After every problem, whether solved independently or with help, I would check the &lt;strong>Solutions&lt;/strong> section to see how others approached it. The top-voted solutions often showcased creative and optimized methods, sometimes even better than the Editorial solutions.&lt;/p>
&lt;p>As the saying goes, &lt;em>&amp;ldquo;If you want to go fast, go alone. If you want to go far, go together.&amp;rdquo;&lt;/em> To find companions and exchange experiences, I frequently joined discussions on the voz forum. This not only motivated me but also allowed me to learn various approaches from the community. To maintain motivation, I set a specific goal: reaching &lt;strong>6000 points&lt;/strong> to earn the LeetCode T-shirt. Setting clear goals gave me a reason to keep pushing forward every day.&lt;/p>
&lt;h1 id="achieving-the-goal-and-deciding-to-pause">Achieving the Goal and Deciding to Pause
&lt;/h1>&lt;p>After about &lt;strong>1.5 years&lt;/strong> of consistent effort, on July 26, 2024, I finally achieved my goal of 6000 points and claimed the T-shirt.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/leetcode/leetcode_t_shirt.webp"
width="1586"
height="550"
srcset="https://namanh11611.github.io/p/leetcode/leetcode_t_shirt_hu_efeb6af5c85d7c0f.webp 480w, https://namanh11611.github.io/p/leetcode/leetcode_t_shirt_hu_4574688631c0bdc4.webp 1024w"
loading="lazy"
alt="LeetCode T-Shirt"
class="gallery-image"
data-flex-grow="288"
data-flex-basis="692px"
>&lt;/p>
&lt;p>However, with work becoming busier, I decided to take a break and focus on current responsibilities. Interestingly, the number of problems I solved happened to be &lt;strong>555&lt;/strong>—a perfect milestone. Maybe it’s a signal from the universe.&lt;/p>
&lt;blockquote>
&lt;p>When working with Thai colleagues, I learned that &lt;strong>555&lt;/strong> in Thai is pronounced like laughter, &lt;strong>Hahaha&lt;/strong>. Isn’t this universal signal quite amusing?&lt;/p>&lt;/blockquote>
&lt;p>Taking a break doesn’t mean giving up. In the future, if I feel inspired or need to prepare for companies that demand higher algorithm expertise, I’ll return to solving problems. The journey of solving 555 LeetCode problems has significantly enhanced my programming skills and logical thinking.&lt;/p>
&lt;p>Wishing you all an energetic week ahead!&lt;/p></description></item><item><title>Từ câu chuyện kải kách chữ Quốc ngữ đến những nguyên lý trong lập trình</title><link>https://namanh11611.github.io/p/vietnamese/</link><pubDate>Wed, 20 Mar 2024 00:00:00 +0700</pubDate><guid>https://namanh11611.github.io/p/vietnamese/</guid><description>&lt;img src="https://namanh11611.github.io/p/vietnamese/vietnamese.webp" alt="Featured image of post Từ câu chuyện kải kách chữ Quốc ngữ đến những nguyên lý trong lập trình" />&lt;h1 id="chữ-quốc-ngữ-vốn-chứa-đựng-nhiều-lỗi">Chữ Quốc ngữ vốn chứa đựng nhiều lỗi
&lt;/h1>&lt;p>Trước hết để mọi người không nhầm lẫn thì cần phân biệt rõ ràng 2 khái niệm &lt;strong>tiếng Việt&lt;/strong> và &lt;strong>chữ Quốc ngữ&lt;/strong>. &lt;a class="link" href="https://vi.wikipedia.org/wiki/Ti%E1%BA%BFng_Vi%E1%BB%87t" target="_blank" rel="noopener"
>&lt;strong>Tiếng Việt&lt;/strong>&lt;/a> là ngôn ngữ của người Việt và đã xuất hiện từ &lt;strong>khoảng đầu Công nguyên&lt;/strong>, là cách mà cha ông ta nói chuyện, giao tiếp với nhau, gọi tên sự vật, hiện tượng như &lt;code>trời&lt;/code>, &lt;code>đất&lt;/code>, &lt;code>bánh chưng&lt;/code>, &lt;code>bánh dày&lt;/code>&amp;hellip; Còn &lt;a class="link" href="https://vi.wikipedia.org/wiki/Ch%E1%BB%AF_Qu%E1%BB%91c_ng%E1%BB%AF" target="_blank" rel="noopener"
>&lt;strong>chữ Quốc ngữ&lt;/strong>&lt;/a> là một loại chữ viết dựa trên &lt;strong>chữ cái Latinh&lt;/strong>, được sáng tạo bởi các &lt;strong>tu sĩ Bồ Đào Nha&lt;/strong> dùng để ghi âm tiếng Việt vào &lt;strong>đầu thế kỷ XVII&lt;/strong>.&lt;/p>
&lt;p>Mình không có vấn đề gì với &lt;strong>tiếng Việt&lt;/strong>, nhưng &lt;strong>chữ Quốc ngữ&lt;/strong> thì mình thấy nó còn chứa đựng nhiều lỗi. Ví dụ như hồi đi học, có bao giờ bạn thắc mắc:&lt;/p>
&lt;ul>
&lt;li>Tại sao tên một số địa danh như &lt;code>Đắk Lắk&lt;/code>, &lt;code>Đắk Nông&lt;/code> lại có cách viết khác với các từ thông thường?&lt;/li>
&lt;li>Tại sao chữ &lt;code>c&lt;/code>, &lt;code>g&lt;/code>, &lt;code>ng&lt;/code> lại không thể đứng trước &lt;code>e&lt;/code>, &lt;code>ê&lt;/code>, &lt;code>i&lt;/code>, mà chúng ta phải dùng &lt;code>k&lt;/code>, &lt;code>gh&lt;/code>, &lt;code>ngh&lt;/code>?&lt;/li>
&lt;li>Tại sao Bác Hồ lại viết là &lt;code>Đường Kách mệnh&lt;/code> chứ không phải là &lt;code>Đường Cách mạng&lt;/code> như ngày nay chúng ta hay viết?&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://namanh11611.github.io/p/vietnamese/duongkachmenh.webp"
width="640"
height="906"
srcset="https://namanh11611.github.io/p/vietnamese/duongkachmenh_hu_9bc9b3f2bcd81be2.webp 480w, https://namanh11611.github.io/p/vietnamese/duongkachmenh_hu_64a3bd3042bced0a.webp 1024w"
loading="lazy"
alt="DuongKachMenh"
class="gallery-image"
data-flex-grow="70"
data-flex-basis="169px"
>&lt;/p>
&lt;p>Chữ Quốc ngữ vay mượn chủ yếu từ tiếng &lt;strong>Bồ Đào Nha&lt;/strong> và tiếng &lt;strong>Ý&lt;/strong>, ví dụ như trong tiếng Bồ Đào Nha, nếu để chữ &lt;code>c&lt;/code> đứng trước &lt;code>a&lt;/code>,&lt;code>o&lt;/code>,&lt;code>u&lt;/code> sẽ biểu thị phụ âm &lt;code>/k/&lt;/code>, nhưng khi đứng trước &lt;code>e&lt;/code>,&lt;code>i&lt;/code> sẽ biểu thị phụ âm &lt;code>/s/&lt;/code>. Vì vậy để tránh cho những người biết tiếng biết Bồ Đào Nha khỏi đọc sai, các tu sĩ mới đặt ra quy tắc phải dùng &lt;code>k&lt;/code> thay cho &lt;code>c&lt;/code> khi đứng trước &lt;code>e&lt;/code>,&lt;code>ê&lt;/code>,&lt;code>i&lt;/code>,&lt;code>y&lt;/code>.&lt;/p>
&lt;p>Còn với người Việt Nam, chúng ta không bị hiểu nhầm như trên, nên chúng ta có thể hoàn toàn dùng &lt;code>c&lt;/code> thay cho &lt;code>k&lt;/code> trong mọi từ mà không bị phát âm sai. Ví dụ như nếu mình viết là &lt;code>con ciến&lt;/code> thay cho &lt;code>con kiến&lt;/code>, &lt;code>cái cem&lt;/code> thay cho &lt;code>cái kem&lt;/code>, mặc dù là viết sai chính tả, nhưng người Việt vẫn có thể đọc đúng, chứ không đọc thành &lt;code>con siến&lt;/code> hay &lt;code>cái sem&lt;/code> như người Bồ Đào Nha.&lt;/p>
&lt;p>Như trong tiêu đề của bài viết này, mình dùng từ &lt;code>kải kách&lt;/code> thay cho &lt;code>cải cách&lt;/code> nhưng các bạn vẫn hiểu ý mình đang truyền đạt đúng không?&lt;/p>
&lt;h1 id="những-công-trình-không-bao-giờ-được-triển-khai">Những công trình không bao giờ được triển khai
&lt;/h1>&lt;p>Nhận thấy sự bất hợp lý này, đã có rất nhiều công trình đề xuất cải tiến chữ Quốc ngữ. Trong đó có thể kể đến dự thảo &lt;strong>Phương án cải tiến chữ Quốc ngữ bước đầu&lt;/strong> của &lt;strong>Giáo sư Hoàng Phê&lt;/strong> xây dựng từ những năm &lt;strong>1960-1961&lt;/strong>. Trong đó, ông đề xuất một số điểm như:&lt;/p>
&lt;ul>
&lt;li>Bỏ &lt;code>h&lt;/code> trong &lt;code>gh&lt;/code> và &lt;code>ngh&lt;/code>. Ví dụ: ghê -&amp;gt; gê, nghe -&amp;gt; nge, nghiêng -&amp;gt; ngiêng.&lt;/li>
&lt;li>Dùng &lt;code>f&lt;/code> thay &lt;code>ph&lt;/code>, &lt;code>d&lt;/code> thay &lt;code>đ&lt;/code>, &lt;code>z&lt;/code> thay &lt;code>d&lt;/code> và &lt;code>gi&lt;/code>. Ví dụ: dân tộc -&amp;gt; zân tộc, đất nước -&amp;gt; dất nước, phương pháp -&amp;gt; fương fáp.&lt;/li>
&lt;li>Nhất luật viết phụ âm &lt;code>/k/&lt;/code> bằng &lt;code>k&lt;/code> trong mọi trường hợp, thay cho &lt;code>c&lt;/code>, và nghiên cứu thay cả cho &lt;code>q&lt;/code>. Ví dụ như &lt;code>Đường kách mệnh&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Hoặc một trường hợp nổi tiếng khác là đề xuất &lt;strong>Phương án cải tiến chữ Quốc ngữ&lt;/strong> của &lt;strong>Phó giáo sư Bùi Hiền&lt;/strong>. Ông từng công bố đề xuất ở Báo Giáo dục và Thời đại số 72 ngày &lt;strong>8/9/1995&lt;/strong>. Cuối năm 2017, sau một cuộc hội thảo thì đề xuất của ông được đưa ra truyền thông và đã có bàn cãi sôi nổi do những khác lạ trong lối viết cải tiến mà ông đưa ra. Ở thời điểm đó, khi mà người người nhà nhà chê trách PGS Bùi Hiền, có lẽ mình là một trong số ít những người thấy được một số điểm hợp lý trong đề xuất của ông (chỉ một số thôi chứ không phải toàn bộ phương án).&lt;/p>
&lt;p>Nhưng qua năm tháng, các bạn có thể thấy những công trình trên sẽ &lt;strong>không bao giờ được triển khai&lt;/strong>, bởi vì nó sẽ gây tốn kém rất lớn về &lt;strong>thời gian&lt;/strong>, &lt;strong>tiền bạc&lt;/strong> và &lt;strong>nguồn lực&lt;/strong> của cả xã hội. Hãy thử tưởng tượng cả nước phải đi đổi Căn cước công dân, Sổ hộ khẩu, giấy tờ hành chính, các bộ gõ tiếng Việt phải cập nhật lại quy tắc, các phần mềm phải cập nhật lại giao diện&amp;hellip; Mình nghĩ nó phải tốn cả chục năm để hoàn thành mất.&lt;/p>
&lt;h1 id="những-nguyên-lý-trong-lập-trình">Những nguyên lý trong lập trình
&lt;/h1>&lt;p>Câu chuyện trên nghe qua thì có vẻ như chẳng liên quan đến ngành &lt;strong>Công nghệ thông tin&lt;/strong>, nhưng các bạn hãy thử xoay góc nhìn, coi &lt;strong>chữ Quốc ngữ&lt;/strong> như một &lt;strong>ngôn ngữ lập trình&lt;/strong> với bộ quy tắc riêng về cách đặt phụ âm, cách kết nối các âm, cách đánh dấu thanh&amp;hellip; Qua đó, chúng ta sẽ có một số góc nhìn mới về sự ra đời và phát triển của &lt;strong>chữ Quốc ngữ&lt;/strong> và liên hệ nó với các nguyên lý, bài học trong ngành lập trình.&lt;/p>
&lt;h2 id="code-luôn-có-đầy-rẫy-edge-case">Code luôn có đầy rẫy edge case
&lt;/h2>&lt;p>Có thể thấy, tên một số địa danh như &lt;code>Đắk Lắk&lt;/code>, &lt;code>Đắk Nông&lt;/code> chính là một edge case của chữ Quốc ngữ. Trong lập trình cũng vậy, chúng ta luôn phải lưu ý xử lý edge case để &lt;strong>tránh chương trình gặp lỗi&lt;/strong> sau này.&lt;/p>
&lt;p>Ví dụ như thực hiện phép chia thì luôn phải kiểm tra trường hợp &lt;strong>số chia khác 0&lt;/strong>, tìm phần tử đầu tiên của mảng thì luôn phải kiểm tra trường hợp &lt;strong>mảng bị rỗng&lt;/strong>.&lt;/p>
&lt;p>Ví dụ bạn có một input text field thì cần suy nghĩ các edge case như user không nhập gì, user nhập text quá dài hoặc user nhập sai format mà chúng ta mong muốn. Việc check edge case trong trường hợp này còn giúp chúng ta tránh được cuộc tấn công &lt;strong>Cross Site Scripting (XSS)&lt;/strong>.&lt;/p>
&lt;h2 id="tính-tương-thích-ngược-backward-compatible">Tính tương thích ngược (Backward Compatible)
&lt;/h2>&lt;p>Thực ra chữ Quốc ngữ vẫn đang có những &lt;strong>sự cải tiến&lt;/strong> từ lúc ra đời đến ngày nay. Ví dụ như ngày xưa Bác Hồ viết &lt;code>Đường Kách mệnh&lt;/code> nhưng ngày nay chúng ta lại viết là &lt;code>Đường Cách mạng&lt;/code>. Hoặc trước đây, các từ ghép hoặc tên riêng thường có dấu gạch nối ở giữa, ví dụ như &lt;code>độc-lập&lt;/code>, &lt;code>tự-do&lt;/code>, &lt;code>Việt-Nam&lt;/code>, &lt;code>Luân-Đôn&lt;/code>&amp;hellip; Thế nhưng ngày nay, những dấu gạch nối đó đã bị bỏ đi. Những sự cải tiến nhỏ này vẫn đảm bảo mọi người có thể hiểu được cách viết mới dễ dàng, không cần tốn quá nhiều thời gian để làm quen.&lt;/p>
&lt;p>Trong các ngôn ngữ lập trình, khi có nâng cấp một version mới, thường nó sẽ luôn được đảm bảo &lt;strong>tính tương thích ngược&lt;/strong> để những chương trình viết theo cách viết code cũ &lt;strong>không bị xảy ra lỗi&lt;/strong>. Ví dụ như các function cũ có thể bị đánh dấu là &lt;code>Deprecated&lt;/code>, hiển thị warning cho các lập trình viên biết rằng function này sẽ sớm bị thay thế, nhưng không bị xoá ngay để chúng ta có thời gian update nó.&lt;/p>
&lt;h2 id="code-đang-chạy-ổn-thì-đừng-đụng-vào">Code đang chạy ổn thì đừng đụng vào
&lt;/h2>&lt;p>Việc đề xuất cải cách của PGS Bùi Hiền bị dư luận phản ứng dữ dội một phần vì nó &lt;strong>khác quá xa&lt;/strong> với những gì mà mọi người đang đọc, đang viết hàng ngày. Nếu được áp dụng vào thực tế, chắc chắn trong quá trình thực thi sẽ có những sự &lt;strong>xung đột&lt;/strong> giữa những văn bản, phần mềm được viết bằng &lt;strong>kiểu chữ cũ&lt;/strong> và &lt;strong>kiểu chữ cải cách&lt;/strong>.&lt;/p>
&lt;p>Nó giống như câu chuyện kinh điển trong ngày lập trình mà anh em thường nói vui với nhau &lt;em>&amp;ldquo;Code đang chạy ổn thì đừng đụng vào&amp;rdquo;&lt;/em>. Hồi mới ra trường, mình từng nhiệt tình xung phong refactor một feature có flow khá phức tạp. Thế rồi hậu quả là mình mất một mớ thời gian để đi fix bug cho những corner case của feature đó mà khi bắt đầu làm mình chưa lường trước hết được.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/vietnamese/refactor.webp"
width="1073"
height="1200"
srcset="https://namanh11611.github.io/p/vietnamese/refactor_hu_9230d2d4cc8f5135.webp 480w, https://namanh11611.github.io/p/vietnamese/refactor_hu_13859f1d612c0e93.webp 1024w"
loading="lazy"
alt="Refactor"
class="gallery-image"
data-flex-grow="89"
data-flex-basis="214px"
>&lt;/p>
&lt;h2 id="phát-hiện-lỗi-càng-muộn-chi-phí-sửa-đổi-càng-lớn">Phát hiện lỗi càng muộn, chi phí sửa đổi càng lớn
&lt;/h2>&lt;p>Như mình chia sẻ ở trên, những công trình cải cách chữ Quốc ngữ trên có thể sẽ không bao giờ được đưa vào đời sống bởi vì sự tốn kém của nó. Nếu muốn sửa, có lẽ thời điểm tốt nhất là lúc&amp;hellip; các tu sỹ Bồ Đào Nha &lt;strong>mới sáng tạo ra&lt;/strong> nó.&lt;/p>
&lt;p>Cùng là một bug, nếu bạn phát hiện ra nó ở phase &lt;strong>develop&lt;/strong>, bạn chỉ cần &lt;strong>sửa vài dòng code&lt;/strong> là xong. Nếu nó đã được &lt;strong>release lên beta&lt;/strong>, việc chỉnh sửa có thể sẽ ảnh hưởng đến &lt;strong>một nhóm nhỏ user&lt;/strong>. Còn nếu xui hơn là sản phẩm đã được &lt;strong>release lên production&lt;/strong> tới toàn bộ user, &lt;strong>một thay đổi nhỏ&lt;/strong> có thể &lt;strong>gây ảnh hưởng cực lớn&lt;/strong>, ví dụ như làm mất dữ liệu của user hoặc gây ra trải nghiệm tệ trong quá trình sử dụng phần mềm.&lt;/p>
&lt;p>Bạn có nhớ đến trường hợp lỗi pin của điện thoại Galaxy Note 7 không? Sự cố này đã khiến Samsung phải thu hồi dòng điện thoại này, gây thiệt hại cho hãng 5,4 tỷ USD.&lt;/p>
&lt;h1 id="kết-luận">Kết luận
&lt;/h1>&lt;p>Bài viết này chỉ đưa ra một góc nhìn thú vị về lập trình và cuộc sống, không nhằm mục đích công kích tổ chức hay cá nhân nào. Hy vọng bạn coi nó như một bài viết mang tính giải trí trong lúc trà dư tửu hậu.&lt;/p></description></item><item><title>Mermaid - Draw diagrams and charts as easily as candy with Markdown</title><link>https://namanh11611.github.io/p/mermaid/</link><pubDate>Sun, 25 Feb 2024 00:00:00 +0700</pubDate><guid>https://namanh11611.github.io/p/mermaid/</guid><description>&lt;img src="https://namanh11611.github.io/p/mermaid/mermaid.webp" alt="Featured image of post Mermaid - Draw diagrams and charts as easily as candy with Markdown" />&lt;h1 id="the-old-days">The Old Days
&lt;/h1>&lt;p>As you know, diagrams and documentation play an important role in projects. They act as a compass to help developers understand the ideas of PMs, tech leads, or BAs, guide the required flow, and serve as evidence for reference when there are disputes about project requirements. A picture is worth a thousand words; sometimes a clear diagram can save hours of explanation and back-and-forth discussion.&lt;/p>
&lt;p>Previously, when drawing diagrams for projects, I often used &lt;strong>&lt;a class="link" href="https://app.diagrams.net" target="_blank" rel="noopener"
>draw.io&lt;/a>&lt;/strong>. For those who don&amp;rsquo;t know, it&amp;rsquo;s an online tool for drawing diagrams by &lt;strong>drag and drop&lt;/strong>. But every time I needed to update a diagram, I had to drag and drop each box or arrow again, which was quite time-consuming. Until one day, a colleague introduced me to &lt;strong>Mermaid&lt;/strong>, and everything changed&amp;hellip;&lt;/p>
&lt;h1 id="enlightened-by-mermaid">Enlightened by Mermaid
&lt;/h1>&lt;p>According to the definition on the official website, &lt;strong>&lt;a class="link" href="https://mermaid.js.org" target="_blank" rel="noopener"
>Mermaid&lt;/a>&lt;/strong> is a tool built on &lt;strong>JavaScript&lt;/strong> that helps create &lt;strong>diagrams&lt;/strong> and &lt;strong>charts&lt;/strong> flexibly from &lt;strong>text&lt;/strong> with syntax similar to &lt;strong>Markdown&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/mermaid.webp"
width="1170"
height="497"
srcset="https://namanh11611.github.io/p/mermaid/mermaid_hu_8707d18b135a8275.webp 480w, https://namanh11611.github.io/p/mermaid/mermaid_hu_6a72931c7ec8fb24.webp 1024w"
loading="lazy"
alt="Mermaid"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="564px"
>&lt;/p>
&lt;h2 id="advantages">Advantages
&lt;/h2>&lt;p>This is an open-source and completely free tool. It supports many popular types of diagrams and charts such as &lt;strong>Flowchart&lt;/strong>, &lt;strong>Sequence diagram&lt;/strong>, &lt;strong>Class diagram&lt;/strong>, &lt;strong>State diagram&lt;/strong>, &lt;strong>Git graph&lt;/strong>&amp;hellip;&lt;/p>
&lt;p>The syntax is very simple and easy to learn. If you&amp;rsquo;re already familiar with Markdown, you just need to spend a little time to master it. Now, whenever project requirements change, you only need to edit a few lines of text and the diagram will be updated quickly.&lt;/p>
&lt;p>For simple diagrams, you can use &lt;strong>&lt;a class="link" href="https://mermaid.live" target="_blank" rel="noopener"
>Mermaid Live Editor&lt;/a>&lt;/strong> without installing anything. For company projects, Mermaid is already integrated with &lt;strong>Notion&lt;/strong> or &lt;strong>Atlassian&lt;/strong> products. If you want to use it locally, Mermaid works right in popular IDEs like &lt;strong>Visual Studio Code&lt;/strong> or JetBrains family.&lt;/p>
&lt;h2 id="comparison-with-plantuml">Comparison with PlantUML
&lt;/h2>&lt;p>There are other tools on the market that render diagrams from text like Mermaid, the most notable being &lt;strong>&lt;a class="link" href="https://plantuml.com" target="_blank" rel="noopener"
>PlantUML&lt;/a>&lt;/strong>. Below is a comparison table for an overview.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Criteria&lt;/th>
&lt;th>Mermaid&lt;/th>
&lt;th>PlantUML&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GitHub Star (25/2/2024)&lt;/td>
&lt;td>&lt;a class="link" href="https://github.com/mermaid-js/mermaid" target="_blank" rel="noopener"
>65,400&lt;/a>&lt;/td>
&lt;td>&lt;a class="link" href="https://github.com/plantuml/plantuml" target="_blank" rel="noopener"
>9,300&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Diagram types&lt;/td>
&lt;td>Flow, Sequence, Class, State, Git graph&amp;hellip;&lt;/td>
&lt;td>Sequence, Usecase, Class, Object, Activity, State&amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Online support&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Offline support&lt;/td>
&lt;td>Yes&lt;/td>
&lt;td>Yes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pricing&lt;/td>
&lt;td>Free&lt;/td>
&lt;td>Free&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Others&lt;/td>
&lt;td>Easy to learn, user-friendly for beginners&lt;/td>
&lt;td>Many extension libraries&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="installation-on-visual-studio-code">Installation on Visual Studio Code
&lt;/h1>&lt;p>Currently, in my project, the team is creating a separate project for diagrams, using &lt;strong>Git&lt;/strong> for version control and &lt;strong>Visual Studio Code&lt;/strong> for drawing.&lt;/p>
&lt;p>You only need to install 2 extensions: &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid" target="_blank" rel="noopener"
>Markdown Preview Mermaid Support&lt;/a> and &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=bpruitt-goddard.mermaid-markdown-syntax-highlighting" target="_blank" rel="noopener"
>Mermaid Markdown Syntax Highlighting&lt;/a> on Visual Studio Code to get started.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/mermaid_extension.webp"
width="836"
height="422"
srcset="https://namanh11611.github.io/p/mermaid/mermaid_extension_hu_2249d872729c0b43.webp 480w, https://namanh11611.github.io/p/mermaid/mermaid_extension_hu_74e43010620d87de.webp 1024w"
loading="lazy"
alt="Mermaid Extensions"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="475px"
>&lt;/p>
&lt;p>Whenever you need to draw a diagram, create a file with the &lt;code>.md&lt;/code> extension and write the Mermaid syntax. You can click the &lt;strong>Open Preview&lt;/strong> button in the top right corner to code and see the diagram updated live beside it. The result is as follows:&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/mermaid_preview.webp"
width="2318"
height="1030"
srcset="https://namanh11611.github.io/p/mermaid/mermaid_preview_hu_8ae7963e46cdda9a.webp 480w, https://namanh11611.github.io/p/mermaid/mermaid_preview_hu_b381af8ecac4e58c.webp 1024w"
loading="lazy"
alt="Mermaid Preview"
class="gallery-image"
data-flex-grow="225"
data-flex-basis="540px"
>&lt;/p>
&lt;p>Just check out the example first, and I&amp;rsquo;ll go into detail about the syntax for each type of diagram in the next section.&lt;/p>
&lt;h1 id="syntax-for-common-diagrams">Syntax for Common Diagrams
&lt;/h1>&lt;h2 id="flowchart">&lt;a class="link" href="https://mermaid.js.org/syntax/flowchart.html" target="_blank" rel="noopener"
>Flowchart&lt;/a>
&lt;/h2>&lt;p>A flowchart consists of &lt;strong>nodes&lt;/strong> and &lt;strong>edges&lt;/strong> (which can be &lt;strong>undirected edges&lt;/strong> or &lt;strong>directed arrows&lt;/strong>). The Mermaid code will determine how to create the nodes and edges, with customizable edge types according to the drawer&amp;rsquo;s intention.&lt;/p>
&lt;p>Sample syntax:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">flowchart TD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A--&amp;gt;B;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> A--&amp;gt;C;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> B--&amp;gt;D;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> C--&amp;gt;D;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>flowchart&lt;/code>: the keyword for this type of chart (you can also use &lt;code>graph&lt;/code> interchangeably).&lt;/li>
&lt;li>&lt;code>TD&lt;/code>: the direction of the chart (top to down). Other options include:
&lt;ul>
&lt;li>&lt;code>TB&lt;/code>: top to bottom (same as top to down)&lt;/li>
&lt;li>&lt;code>BT&lt;/code>: bottom to top&lt;/li>
&lt;li>&lt;code>RL&lt;/code>: right to left&lt;/li>
&lt;li>&lt;code>LR&lt;/code>: left to right&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>A&lt;/code>, &lt;code>B&lt;/code>, &lt;code>C&lt;/code>, &lt;code>D&lt;/code>: the names of the nodes. Besides the default rectangle, you can also use other shapes like rounded rectangles, trapezoids, circles, etc.&lt;/li>
&lt;li>&lt;code>--&amp;gt;&lt;/code>: directed edge type. There are also undirected, bidirectional types, and types with attached text&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>Result:&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/flowchart.webp"
width="252"
height="496"
srcset="https://namanh11611.github.io/p/mermaid/flowchart_hu_c346c33234b451d9.webp 480w, https://namanh11611.github.io/p/mermaid/flowchart_hu_f544ee1f7d295db7.webp 1024w"
loading="lazy"
alt="Flowchart"
class="gallery-image"
data-flex-grow="50"
data-flex-basis="121px"
>&lt;/p>
&lt;h2 id="sequence-diagram">&lt;a class="link" href="https://mermaid.js.org/syntax/sequenceDiagram.html" target="_blank" rel="noopener"
>Sequence diagram&lt;/a>
&lt;/h2>&lt;p>A sequence diagram is an &lt;strong>interaction diagram&lt;/strong> that shows how different &lt;strong>processes&lt;/strong> operate with each other &lt;strong>and in what order&lt;/strong>.&lt;/p>
&lt;p>Sample syntax:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sequenceDiagram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> participant Alice
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> participant Bob
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> participant John
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> loop Healthcheck
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> John-&amp;gt;&amp;gt;John: Fight against hypochondria
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> John--&amp;gt;&amp;gt;Alice: Great!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> John-&amp;gt;&amp;gt;Bob: How about you?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>sequenceDiagram&lt;/code>: the keyword for the diagram.&lt;/li>
&lt;li>&lt;code>participant&lt;/code>: defines the participants in the diagram in sequential order. In this example, we have 3 participants: &lt;code>Alice&lt;/code>, &lt;code>Bob&lt;/code>, and &lt;code>John&lt;/code>.&lt;/li>
&lt;li>Each line defines the message between the participants.&lt;/li>
&lt;li>&lt;code>-&amp;gt;&amp;gt;&lt;/code>, &lt;code>--&amp;gt;&amp;gt;&lt;/code>: directed message types with solid and dashed lines.&lt;/li>
&lt;/ul>
&lt;p>Result:&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/sequence_diagram.webp"
width="1236"
height="1110"
srcset="https://namanh11611.github.io/p/mermaid/sequence_diagram_hu_bd2588b475a275d6.webp 480w, https://namanh11611.github.io/p/mermaid/sequence_diagram_hu_9f4e4d43378930b0.webp 1024w"
loading="lazy"
alt="Sequence diagram"
class="gallery-image"
data-flex-grow="111"
data-flex-basis="267px"
>&lt;/p>
&lt;h2 id="class-diagram">&lt;a class="link" href="https://mermaid.js.org/syntax/classDiagram.html" target="_blank" rel="noopener"
>Class diagram&lt;/a>
&lt;/h2>&lt;p>A class diagram in &lt;strong>UML&lt;/strong> (Unified Modeling Language) is a type of &lt;strong>static structure diagram&lt;/strong> that describes the &lt;strong>structure of a system&lt;/strong> by showing the &lt;strong>classes&lt;/strong> of the system, their &lt;strong>attributes&lt;/strong>, &lt;strong>operations&lt;/strong> (or methods), and the &lt;strong>relationships between objects&lt;/strong>.&lt;/p>
&lt;p>Sample syntax:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">classDiagram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class01 &amp;lt;|-- AveryLongClass : Cool
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class03 *-- Class04
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class05 o-- Class06
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class07 .. Class08
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class09 --&amp;gt; C2 : Where am i?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class09 --* C3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class09 --|&amp;gt; Class07
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class07 : equals()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class07 : Object[] elementData
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class01 : size()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class01 : int chimp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class01 : int gorilla
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Class08 &amp;lt;--&amp;gt; C2: Cool label
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>classDiagram&lt;/code>: the keyword for the diagram.&lt;/li>
&lt;li>&lt;code>chimp&lt;/code>, &lt;code>gorilla&lt;/code>, &lt;code>elementData&lt;/code>: attributes of the classes.&lt;/li>
&lt;li>&lt;code>size()&lt;/code>, &lt;code>equals()&lt;/code>: methods of the classes.&lt;/li>
&lt;li>&lt;code>*--&lt;/code>, &lt;code>o--&lt;/code>: relationships between classes.&lt;/li>
&lt;/ul>
&lt;p>Result:&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/class_diagram.webp"
width="1388"
height="1330"
srcset="https://namanh11611.github.io/p/mermaid/class_diagram_hu_12d0f849ab8875e3.webp 480w, https://namanh11611.github.io/p/mermaid/class_diagram_hu_13b869379b907de3.webp 1024w"
loading="lazy"
alt="Class diagram"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="250px"
>&lt;/p>
&lt;h2 id="state-diagram">&lt;a class="link" href="https://mermaid.js.org/syntax/stateDiagram.html" target="_blank" rel="noopener"
>State diagram&lt;/a>
&lt;/h2>&lt;p>A state diagram is a type of diagram that describes the &lt;strong>behavior of a system&lt;/strong>, showing some of the system&amp;rsquo;s states.&lt;/p>
&lt;p>Sample syntax:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">stateDiagram
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> [*] --&amp;gt; Still
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Still --&amp;gt; [*]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Still --&amp;gt; Moving
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Moving --&amp;gt; Still
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Moving --&amp;gt; Crash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Crash --&amp;gt; [*]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>stateDiagram&lt;/code>: the keyword for the diagram.&lt;/li>
&lt;li>&lt;code>[*]&lt;/code>: start or end point.&lt;/li>
&lt;li>&lt;code>Still&lt;/code>, &lt;code>Moving&lt;/code>, &lt;code>Crash&lt;/code>: the states of the system.&lt;/li>
&lt;li>&lt;code>--&amp;gt;&lt;/code>: state transition steps.&lt;/li>
&lt;/ul>
&lt;p>Result:&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/state_diagram.webp"
width="256"
height="750"
srcset="https://namanh11611.github.io/p/mermaid/state_diagram_hu_8ca02c9f3ec3c06f.webp 480w, https://namanh11611.github.io/p/mermaid/state_diagram_hu_6c7f85b84a94e4b0.webp 1024w"
loading="lazy"
alt="State diagram"
class="gallery-image"
data-flex-grow="34"
data-flex-basis="81px"
>&lt;/p>
&lt;h2 id="git-graph">&lt;a class="link" href="https://mermaid.js.org/syntax/gitgraph.html" target="_blank" rel="noopener"
>Git graph&lt;/a>
&lt;/h2>&lt;p>A git graph illustrates &lt;strong>git commits&lt;/strong> and &lt;strong>git actions&lt;/strong> (commands) on different &lt;strong>branches&lt;/strong>.&lt;/p>
&lt;p>Sample syntax:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gitGraph
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> branch develop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> checkout main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>gitGraph&lt;/code>: the keyword for the graph.&lt;/li>
&lt;li>&lt;code>commit&lt;/code>: creates a new commit on the current branch.&lt;/li>
&lt;li>&lt;code>branch&lt;/code>: creates and switches to a new branch, setting it as the current branch.&lt;/li>
&lt;li>&lt;code>checkout&lt;/code>: checks out an existing branch and sets it as the current branch.&lt;/li>
&lt;li>&lt;code>merge&lt;/code>: merges a branch into the current branch.&lt;/li>
&lt;/ul>
&lt;p>Result:&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/mermaid/git_graph.webp"
width="982"
height="362"
srcset="https://namanh11611.github.io/p/mermaid/git_graph_hu_901573613ada3acd.webp 480w, https://namanh11611.github.io/p/mermaid/git_graph_hu_dbe32b388f17d160.webp 1024w"
loading="lazy"
alt="Git graph"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="651px"
>&lt;/p>
&lt;h1 id="conclusion">Conclusion
&lt;/h1>&lt;p>Mermaid is truly &lt;strong>powerful&lt;/strong> and &lt;strong>flexible&lt;/strong>; it provides us with many &lt;strong>options&lt;/strong> to draw various types of diagrams. However, in this short article, I couldn&amp;rsquo;t introduce all those options to you. If you need more details, you can refer to the Mermaid documentation linked in each title section. I hope you now have an overview of Mermaid and can apply it in your projects or your team&amp;rsquo;s projects, helping save time and effort.&lt;/p></description></item><item><title>6-Month Journey Applying the Pomodoro Technique</title><link>https://namanh11611.github.io/p/pomodoro/</link><pubDate>Sat, 23 Dec 2023 00:00:00 +0700</pubDate><guid>https://namanh11611.github.io/p/pomodoro/</guid><description>&lt;img src="https://namanh11611.github.io/p/pomodoro/pomodoro.webp" alt="Featured image of post 6-Month Journey Applying the Pomodoro Technique" />&lt;h1 id="what-is-pomodoro">What is Pomodoro?
&lt;/h1>&lt;p>Recently, my work has shifted a bit, and I find myself in an average of 4 meetings every day. Consequently, I often end up accomplishing very little throughout the day. So, I sought a &lt;strong>time management method&lt;/strong> called &lt;strong>Pomodoro&lt;/strong> to help me focus better on my tasks. It wasn&amp;rsquo;t until I applied it that I realized the actual coding time in a day is not as much as I thought.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/pomodoro/pomodoro.webp"
width="6016"
height="4000"
srcset="https://namanh11611.github.io/p/pomodoro/pomodoro_hu_794ab092df18d9c1.webp 480w, https://namanh11611.github.io/p/pomodoro/pomodoro_hu_36681805d8b851d5.webp 1024w"
loading="lazy"
alt="Pomodoro"
class="gallery-image"
data-flex-grow="150"
data-flex-basis="360px"
>&lt;/p>
&lt;p>&lt;strong>Pomodoro&lt;/strong> is an Italian word, meaning tomato, because when Francesco Cirillo developed this method in the late 1980s, he used a tomato-shaped kitchen timer. In brief, this method consists of several steps:&lt;/p>
&lt;ol>
&lt;li>Set the tasks to be done.&lt;/li>
&lt;li>Set a timer for &lt;strong>25 minutes&lt;/strong> (this time is called a pomodoro).&lt;/li>
&lt;li>Work on the task.&lt;/li>
&lt;li>Finish the task and take a &lt;strong>5-minute break&lt;/strong>.&lt;/li>
&lt;li>After &lt;strong>4&lt;/strong> pomodoros, take a &lt;strong>15-minute break&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://namanh11611.github.io/p/pomodoro/result.webp"
width="825"
height="534"
srcset="https://namanh11611.github.io/p/pomodoro/result_hu_5c981fea27f550ae.webp 480w, https://namanh11611.github.io/p/pomodoro/result_hu_a5da7038ac295c66.webp 1024w"
loading="lazy"
alt="Result"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="370px"
>&lt;/p>
&lt;p>To apply Pomodoro, there are many apps, extensions, or even web applications available for you to use. You can find the one that suits you best. Personally, I am using the &lt;strong>Focus To-Do&lt;/strong> app on the App Store, which is quite sufficient for my basic needs.&lt;/p>
&lt;p>Now, after applying it for &lt;strong>6 tháng&lt;/strong>, I want to share with you the benefits it brings, as well as the points I think it may not be suitable.&lt;/p>
&lt;h1 id="improving-focus">Improving Focus
&lt;/h1>&lt;p>Previously, there were days when I was extremely focused for 4-5 consecutive hours, which helped me accomplish a lot of tasks. However, after such days, I often felt quite tired.&lt;/p>
&lt;p>But there were also days when I spent the whole hour reading news, scrolling through Facebook, and suddenly realized I hadn&amp;rsquo;t accomplished anything.&lt;/p>
&lt;p>The human brain is truly effective when concentrated for a short period with reasonable breaks. Applying Pomodoro, knowing I only need to focus for 25 minutes, a not too long duration, allows me to fully concentrate on the task without worrying about getting tired at the end of the day. I also know that after these 25 minutes, I will have a break, so there&amp;rsquo;s no temptation to turn to Facebook during work.&lt;/p>
&lt;p>During one pomodoro, you should only focus on one task. For example, if you are working on task A, only work on task A. If you finish it before the pomodoro ends, spend the remaining time checking it again, but don&amp;rsquo;t jump to task B.&lt;/p>
&lt;h1 id="improving-health">Improving Health
&lt;/h1>&lt;p>When it&amp;rsquo;s time for a &lt;strong>5-minute break&lt;/strong>, instead of continuing to stare at the computer, I usually take the time to go to the restroom, get more water, change my playlist, or simply stand up and move around. This helps relax my body, avoiding health issues from sitting for too long.&lt;/p>
&lt;p>However, I find the 5-minute duration a bit short; sometimes, I haven&amp;rsquo;t done anything, and it&amp;rsquo;s already over in 5 minutes. Therefore, in the future, I may consider adjusting it to 7 or 8 minutes and see how it goes.&lt;/p>
&lt;h1 id="ignoring-the-world">Ignoring the World
&lt;/h1>&lt;p>According to the rule, during the 25-minute focused period, you should turn off all app notifications to avoid distraction. However, I haven&amp;rsquo;t reached the point of being able to ignore the whole world because I still need to receive chat notifications to respond to customers and colleagues promptly.&lt;/p>
&lt;p>However, this often disrupts my Pomodoro because I have to spend additional time checking code or documents to be able to respond to people.&lt;/p>
&lt;h1 id="conclusion">Conclusion
&lt;/h1>&lt;p>This method may be suitable for me but may not necessarily be suitable for you. Adhering to Pomodoro has helped me increase work efficiency, but sometimes it makes me feel like I&amp;rsquo;m working like a machine. Try applying it and see the results it brings for you.&lt;/p></description></item><item><title>Technical Blogs of Engineers at Major Companies</title><link>https://namanh11611.github.io/p/technical-blog/</link><pubDate>Wed, 24 May 2023 00:42:00 +0700</pubDate><guid>https://namanh11611.github.io/p/technical-blog/</guid><description>&lt;img src="https://namanh11611.github.io/p/technical-blog/blog.webp" alt="Featured image of post Technical Blogs of Engineers at Major Companies" />&lt;p>Besides learning through tutorials and videos, &lt;strong>technical blogs&lt;/strong> are a great resource. By reading blogs from software engineers at major companies, you can see how they &lt;strong>solve the problems&lt;/strong> they&amp;rsquo;ve encountered. In the age of AI, with tools like &lt;strong>Copilot&lt;/strong> or &lt;strong>Tabnine&lt;/strong> ready to generate code to support you, engineers are no longer distinguished by their ability to &lt;strong>remember the syntax of a language or framework&lt;/strong>, but by their &lt;strong>problem-solving skills&lt;/strong>. So, in this article, I will introduce you to the blogs of major companies, hoping you will gain some interesting perspectives.&lt;/p>
&lt;p>You can click on the title of each section to go to the blog.&lt;/p>
&lt;h1 id="meta">&lt;a class="link" href="https://engineering.fb.com" target="_blank" rel="noopener"
>Meta&lt;/a>
&lt;/h1>&lt;p>&lt;strong>Meta&lt;/strong> (formerly known as &lt;strong>Facebook&lt;/strong>) has many products like Facebook, Instagram, Whatsapp&amp;hellip; On this blog, they share about everything from Android, iOS, Web to more challenging topics like VR/AR or AI.&lt;/p>
&lt;h1 id="google">&lt;a class="link" href="https://developers.google.com" target="_blank" rel="noopener"
>Google&lt;/a>
&lt;/h1>&lt;p>On this homepage, you can choose one of four areas you are interested in: &lt;strong>Mobile&lt;/strong>, &lt;strong>Web&lt;/strong>, &lt;strong>AI&lt;/strong>, or &lt;strong>Cloud&lt;/strong>. Google will then introduce you to detailed articles in that field.&lt;/p>
&lt;p>Google also creates many courses about their technologies. Each course includes videos, detailed explanatory articles, and example exercises for you to follow. When you finish, you can earn a small badge. Quite fun!&lt;/p>
&lt;h1 id="netflix">&lt;a class="link" href="https://netflixtechblog.com" target="_blank" rel="noopener"
>Netflix&lt;/a>
&lt;/h1>&lt;p>In recent years, Netflix has become a household name as a platform for movies and TV shows. Instead of just &lt;em>Netflix and chill&lt;/em>, try reading their blog to see how they build a system that serves millions of users.&lt;/p>
&lt;h1 id="dropbox">&lt;a class="link" href="https://dropbox.tech" target="_blank" rel="noopener"
>Dropbox&lt;/a>
&lt;/h1>&lt;p>Similar to Google Drive, Dropbox is a cloud storage service that helps you store files online and sync them across devices.&lt;/p>
&lt;p>Through their blog, you can learn how to optimize memory and bandwidth when sharing files.&lt;/p>
&lt;h1 id="twitter">&lt;a class="link" href="https://blog.twitter.com/engineering/en_us" target="_blank" rel="noopener"
>Twitter&lt;/a>
&lt;/h1>&lt;p>&lt;strong>&amp;ldquo;Design a system like Twitter&amp;rdquo;&lt;/strong> is a classic question in &lt;strong>System Design&lt;/strong> interviews. So, Twitter&amp;rsquo;s blog is a useful reference when preparing for interviews. You can see if your ideas match how Twitter actually does things.&lt;/p>
&lt;p>Recently, after being acquired by Elon Musk, Twitter even open-sourced their &lt;a class="link" href="https://github.com/twitter/the-algorithm" target="_blank" rel="noopener"
>&lt;strong>Recommendation Algorithm&lt;/strong>&lt;/a>.&lt;/p>
&lt;h1 id="uber">&lt;a class="link" href="https://www.uber.com/en-IN/blog/engineering" target="_blank" rel="noopener"
>Uber&lt;/a>
&lt;/h1>&lt;p>Although Uber has left the Vietnamese market after merging with Grab, it is still &lt;strong>the largest taxi company in the world&lt;/strong>. Therefore, their blog is very suitable for those working in companies with &lt;strong>similar business areas&lt;/strong> in Vietnam.&lt;/p>
&lt;h1 id="spotify">&lt;a class="link" href="https://engineering.atspotify.com" target="_blank" rel="noopener"
>Spotify&lt;/a>
&lt;/h1>&lt;p>I remember when Spotify first launched in Vietnam, everyone was amazed by its recommendation capabilities.&lt;/p>
&lt;p>Spotify&amp;rsquo;s &lt;strong>recommender system&lt;/strong> is a complex system, combining many &lt;strong>algorithms&lt;/strong> and &lt;strong>Machine Learning models&lt;/strong>. Through this blog, hopefully you will discover part of that system.&lt;/p>
&lt;h1 id="line">&lt;a class="link" href="https://engineering.linecorp.com/en/blog" target="_blank" rel="noopener"
>LINE&lt;/a>
&lt;/h1>&lt;p>LINE is one of my former companies. Although it may not be as top-tier as the others above, the sharing culture is very strong. So, through this article, I want to introduce you to the technical blog of engineers at LINE.&lt;/p></description></item><item><title>Things I Wish I Knew When I Was a Junior</title><link>https://namanh11611.github.io/p/junior/</link><pubDate>Thu, 18 May 2023 18:44:00 +0700</pubDate><guid>https://namanh11611.github.io/p/junior/</guid><description>&lt;img src="https://namanh11611.github.io/p/junior/junior.webp" alt="Featured image of post Things I Wish I Knew When I Was a Junior" />&lt;h1 id="who-am-i">Who am I?
&lt;/h1>&lt;p>Hello everyone!&lt;/p>
&lt;p>I&amp;rsquo;m Nam Anh, an Android developer with 5 years of experience. During those 5 years, I&amp;rsquo;ve wandered through quite a few tech companies in Hanoi.&lt;/p>
&lt;p>This is probably the first time I&amp;rsquo;ve written an article from such a personal perspective. So you might wonder: &lt;em>&amp;ldquo;Who is this guy to be giving life advice?&amp;rdquo;&lt;/em>&lt;/p>
&lt;p>Oops, I&amp;rsquo;m not here to lecture anyone, just to share things that I found true for myself. Maybe for you, they&amp;rsquo;re right or wrong. But who knows, maybe some Juniors will gain a new perspective to improve their &lt;strong>career path&lt;/strong>.&lt;/p>
&lt;h1 id="the-lucky-things">The Lucky Things
&lt;/h1>&lt;p>There are things that, when they happened, I didn&amp;rsquo;t realize were right until I looked back later and thought: &lt;em>&amp;ldquo;Oh, turns out I did the right thing back then.&amp;rdquo;&lt;/em> And I feel those were real strokes of luck for me.&lt;/p>
&lt;h2 id="reading-clean-code-right-after-graduation">Reading Clean Code right after graduation
&lt;/h2>&lt;p>I have to admit, I used to love reading books and read quite a lot, all kinds of genres. But I read very few tech books, probably because my English was limited 😢😢&lt;/p>
&lt;p>But the tech book I value the most is &lt;strong>Clean Code&lt;/strong>. As the name suggests, it teaches you how to write &lt;em>&amp;ldquo;clean code&amp;rdquo;&lt;/em>, a fundamental book highly recommended by many. I don&amp;rsquo;t know who convinced me to read it right after graduation, but I read it and took notes summarizing the book. I still keep those notes to this day. Learning from the book, plus a bit of OCD, I think I&amp;rsquo;ve applied quite a bit of it to the projects I&amp;rsquo;ve worked on.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/junior/clean_code.webp"
width="825"
height="619"
srcset="https://namanh11611.github.io/p/junior/clean_code_hu_124b979cab41e09d.webp 480w, https://namanh11611.github.io/p/junior/clean_code_hu_ca66c7ae94fb7ed3.webp 1024w"
loading="lazy"
alt="Clean Code"
class="gallery-image"
data-flex-grow="133"
data-flex-basis="319px"
>&lt;/p>
&lt;p>Some people advise reading &lt;strong>Clean Code&lt;/strong> once when you &lt;strong>just graduate&lt;/strong>, and again after &lt;strong>a few years of working&lt;/strong>, so you can really absorb its content. So I highly, highly recommend everyone read it, whether you&amp;rsquo;re a junior or a seasoned senior.&lt;/p>
&lt;h2 id="working-at-product-companies-with-strict-processes">Working at product companies with strict processes
&lt;/h2>&lt;p>There are already many articles comparing product and outsourcing companies, so I won&amp;rsquo;t repeat that. I&amp;rsquo;ve worked at both types. In this article, I just want to mention &lt;strong>code review processes&lt;/strong> and &lt;strong>product mindset&lt;/strong>.&lt;/p>
&lt;p>From my experience, big product companies have &lt;strong>more time for thorough code reviews&lt;/strong>, not as rushed by deadlines as outsourcing companies. I&amp;rsquo;m only talking about big product companies, because I&amp;rsquo;ve also worked at small startups where the only goal was to get the code running, clean or dirty didn&amp;rsquo;t matter.&lt;/p>
&lt;p>The knowledge I learned from &lt;strong>Clean Code&lt;/strong> was just theory until I joined big product companies and had seniors carefully review my code. That&amp;rsquo;s when I really matured in every line I wrote.&lt;/p>
&lt;p>Another thing I learned is the &lt;strong>product mindset&lt;/strong>—always thinking about the product, wanting it to be better and have more users. When I had an idea for a feature, I was ready to propose it to the leader or Product Manager. The feeling when you finish a feature and see users leaving positive comments on the App Store or Play Store is amazing 😍😍&lt;/p>
&lt;h2 id="daring-to-step-out-of-my-comfort-zone">Daring to step out of my comfort zone
&lt;/h2>&lt;p>In 5 years, I&amp;rsquo;ve switched jobs many times like many others. I don&amp;rsquo;t know about you, but I fear staying at one company too long, getting too comfortable, and then struggling to catch up with the market&amp;rsquo;s demands when I want to switch.&lt;/p>
&lt;p>So moving through many companies helped me adapt to different projects, understand what the market needs, and of course, get a better income.&lt;/p>
&lt;h1 id="things-i-wish-i-knew-sooner">Things I Wish I Knew Sooner
&lt;/h1>&lt;h2 id="stay-at-a-company-long-enough">Stay at a company long enough
&lt;/h2>&lt;p>Contrary to what I said above, here I want to advise young people to stay at a company long enough. In my opinion, at least 1-2 years. It gives you enough time to &lt;strong>understand the project&lt;/strong> and &lt;strong>be properly recognized&lt;/strong>.&lt;/p>
&lt;p>Usually, when you join a project, it takes a few months to understand it. For complex projects, it can take years. &lt;strong>Understanding&lt;/strong> here means not just the &lt;strong>technologies used&lt;/strong> in the source code, but also the &lt;strong>business domain&lt;/strong>, how your app makes money, or even its competitive advantage over others. Some seniors, even when switching companies, only work in banking or fintech, for example. So besides technical skills, they&amp;rsquo;re valued for their business domain knowledge.&lt;/p>
&lt;p>Companies often give out &lt;strong>Best Employee&lt;/strong> awards at Year End Parties, but to be recognized, you have to stay long enough to make an impact. It&amp;rsquo;s rare for a company to give such an award to someone who just finished their probation, unless you&amp;rsquo;re a superstar. Achieving these things proves your ability and makes your profile shine.&lt;/p>
&lt;p>There were times I only stayed at a company for a few months before leaving, and I felt that was a bit of a waste.&lt;/p>
&lt;h2 id="take-english-seriously-sooner">Take English seriously, sooner
&lt;/h2>&lt;p>Everyone knows how important English is for a developer&amp;rsquo;s career. If you can communicate well in English, you have more options: working for foreign companies in Vietnam, working remotely from home, or even going abroad. And a dev with good English communication skills will definitely earn more than one who can only read and understand.&lt;/p>
&lt;p>I graduated with a &lt;strong>TOEIC 460&lt;/strong>—just enough for basic reading. In recent years, I&amp;rsquo;ve started learning English seriously, and now I can communicate well with foreign colleagues. This has brought me many new opportunities.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/junior/elsa.webp"
width="327"
height="400"
srcset="https://namanh11611.github.io/p/junior/elsa_hu_ad8a430846e238e4.webp 480w, https://namanh11611.github.io/p/junior/elsa_hu_be50c867e1e1aed8.webp 1024w"
loading="lazy"
alt="Elsa"
class="gallery-image"
data-flex-grow="81"
data-flex-basis="196px"
>&lt;/p>
&lt;p>I swear this post isn&amp;rsquo;t an ad for the &lt;strong>Elsa&lt;/strong> app, but it&amp;rsquo;s really good so I&amp;rsquo;m recommending it. Here&amp;rsquo;s my 88-day learning streak (I missed a day before and lost my streak 🥲).&lt;/p>
&lt;p>My English still isn&amp;rsquo;t great, so I&amp;rsquo;m learning every day. I&amp;rsquo;ve tried several apps—Duolingo, Memrise, Cake&amp;hellip; and now I use Elsa along with others. But Elsa has helped me improve the most.&lt;/p>
&lt;h2 id="the-difference-comes-after-8pm">The difference comes after 8pm
&lt;/h2>&lt;p>There are two devs, A and B, working at the same company from 8am to 6pm. So what makes the difference between them?&lt;/p>
&lt;p>It comes after 8pm. Dev A spends that time &lt;strong>learning new technologies&lt;/strong>, working on &lt;strong>pet projects&lt;/strong>, or &lt;strong>contributing to open source projects&lt;/strong>. Dev B spends it playing games or drinking. Maybe in the first few years, the difference isn&amp;rsquo;t clear, but after 3 or 5 years, the gap in knowledge and skills will be huge.&lt;/p>
&lt;p>Work at the company is sometimes easy, so you can only learn harder things or new technologies in your free time. For example, if your job is just UI work, you won&amp;rsquo;t need to understand systems or memory deeply. If you don&amp;rsquo;t spend time learning, how can you stand out from your colleagues?&lt;/p>
&lt;p>In my early years, I also spent a lot of time drinking. I can&amp;rsquo;t deny the importance of building relationships through those gatherings. But if I could choose again, I&amp;rsquo;d spend more time at home learning.&lt;/p>
&lt;h1 id="final-words">Final Words
&lt;/h1>&lt;p>On my journey, there were times I made &lt;strong>the right decisions&lt;/strong>, but also plenty of times I &lt;strong>chose wrong&lt;/strong>. But the important thing is I &lt;strong>don&amp;rsquo;t regret&lt;/strong> or dwell on the past—I keep &lt;strong>learning and moving forward&lt;/strong>. I think that&amp;rsquo;s enough.&lt;/p>
&lt;p>Thank you for taking the time to read my article!&lt;/p></description></item><item><title>Tình hình lương thưởng của anh em IT</title><link>https://namanh11611.github.io/p/salary/</link><pubDate>Wed, 10 May 2023 01:40:00 +0700</pubDate><guid>https://namanh11611.github.io/p/salary/</guid><description>&lt;img src="https://namanh11611.github.io/p/salary/salary.webp" alt="Featured image of post Tình hình lương thưởng của anh em IT" />&lt;h1 id="hoàn-cảnh">Hoàn cảnh
&lt;/h1>&lt;p>Hôm vừa rồi một người em bên Nhật chia sẻ với mình rằng muốn mở công ty ở Việt Nam, nhưng chưa hiểu về thị trường hiện tại ở Việt Nam lắm. Mình đành dốc hết những kiến thức nông cạn của mình ra chia sẻ với em về môi trường, công việc cũng như lương thưởng của anh em dev ở Hà Nội, thành phố Hồ Chí Minh và Đà Nẵng&amp;hellip;&lt;/p>
&lt;p>Dẫu biết rằng thị trường đang ảm đạm, làn sóng sa thải cũng đã lan đến Việt Nam từ cuối năm 2022 đến thời điểm hiện tại là tháng 5/2023, nhưng thật sự chưa có một báo cáo đáng tin cậy để đánh giá về tình hình năm 2023 này. Vậy nên mình sẽ dựa vào báo cáo gần nhất của 2 bên &lt;a class="link" href="https://topdev.vn/page/bao-cao-it-viet-nam" target="_blank" rel="noopener"
>&lt;strong>TopDev&lt;/strong>&lt;/a> và &lt;a class="link" href="https://itviec.com/blog/bao-cao-luong-it" target="_blank" rel="noopener"
>&lt;strong>ITViec&lt;/strong>&lt;/a> trong năm 2022 để đưa ra góc nhìn về mức lương thưởng của anh em.&lt;/p>
&lt;p>Trong báo cáo của &lt;strong>TopDev&lt;/strong> có đưa ra cả đánh giá về tình hình tuyển dụng, nhưng mình nghĩ rằng gió đã đổi chiều nên những đánh giá đó không còn chính xác trong năm 2023 này. Còn về lương thưởng, khác với tình hình năm 2020 khi các công ty giảm lương nhân viên để vượt qua giai đoạn khó khăn, trong năm 2023 này, hầu hết các công ty chỉ đưa ra lựa chọn giữ người hoặc sa thải, vậy nên mức lương của những người ở lại sẽ ít bị ảnh hưởng.&lt;/p>
&lt;p>&lt;strong>ITViec&lt;/strong> khảo sát &lt;strong>1.257 chuyên gia IT&lt;/strong> còn &lt;strong>TopDev&lt;/strong> thì dựa trên &lt;strong>48.179 ứng viên IT&lt;/strong>, &lt;strong>100.000 dữ liệu việc làm&lt;/strong> được phân tích và thông tin của &lt;strong>2.500 nhà tuyển dụng&lt;/strong>. Bởi vì khảo sát với một volumn nhỏ thì sẽ có sự sai lệch nhất định so với thị trường, vậy nên mình mới dùng báo cáo của cả 2 bên để mong rằng giảm tối đa sự sai lệch đó và giúp chúng ta có một góc nhìn khách quan nhất.&lt;/p>
&lt;h1 id="mức-lương-theo-công-nghệ">Mức lương theo công nghệ
&lt;/h1>&lt;p>&lt;img src="https://namanh11611.github.io/p/salary/topdev_tech.webp"
width="825"
height="238"
srcset="https://namanh11611.github.io/p/salary/topdev_tech_hu_8e54eca2f027a9f4.webp 480w, https://namanh11611.github.io/p/salary/topdev_tech_hu_777cd4674b564e6d.webp 1024w"
loading="lazy"
alt="TopDev Tech"
class="gallery-image"
data-flex-grow="346"
data-flex-basis="831px"
>&lt;/p>
&lt;p>Trong biểu đồ trên, &lt;strong>TopDev&lt;/strong> thể hiện mức lương của các dev từ 3 năm kinh nghiệm trở xuống. Vậy nên mình thấy nó hơi thấp và không phản ánh được mức lương của senior dev có từ 4-5 năm kinh nghiệm trở lên.&lt;/p>
&lt;p>Top công nghệ được trả lương cao nhất gồm các công nghệ theo xu hướng như &lt;strong>AI&lt;/strong> (Kubernetes, TensorFlows, Python), &lt;strong>Cloud Computing&lt;/strong> (AWS, GCP, Azure). Unity cũng lọt top nhờ trend &lt;strong>play-to-earn&lt;/strong> nổi đình nổi đám trong năm 2022.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/salary/itviec_tech.webp"
width="825"
height="936"
srcset="https://namanh11611.github.io/p/salary/itviec_tech_hu_4940d3cf1655a75c.webp 480w, https://namanh11611.github.io/p/salary/itviec_tech_hu_67ede774c2dd98c.webp 1024w"
loading="lazy"
alt="ITViec Tech"
class="gallery-image"
data-flex-grow="88"
data-flex-basis="211px"
>&lt;/p>
&lt;p>Bảng số liệu của &lt;strong>ITViec&lt;/strong> thể hiện chi tiết hơn mức lương cho từng ngôn ngữ lập trình theo số năm kinh nghiệm. &lt;strong>Python&lt;/strong> vẫn là một trong những ngôn ngữ được trả lương cao, nhưng &lt;strong>Go&lt;/strong> - một ngôn ngữ đang trở thành trending - mới là vũ khí giúp anh em dev được trả lương cao nhất.&lt;/p>
&lt;h1 id="mức-lương-theo-vị-trí">Mức lương theo vị trí
&lt;/h1>&lt;p>&lt;img src="https://namanh11611.github.io/p/salary/topdev_position.webp"
width="825"
height="327"
srcset="https://namanh11611.github.io/p/salary/topdev_position_hu_c99c319ac556665d.webp 480w, https://namanh11611.github.io/p/salary/topdev_position_hu_b158cdd6cdb0fc33.webp 1024w"
loading="lazy"
alt="TopDev Position"
class="gallery-image"
data-flex-grow="252"
data-flex-basis="605px"
>&lt;/p>
&lt;p>Biểu đồ này của &lt;strong>TopDev&lt;/strong> vẫn thể hiện mức lương của các dev từ 3 năm kinh nghiệm trở xuống.&lt;/p>
&lt;p>Các vị trí &lt;strong>CTO&lt;/strong>, &lt;strong>CIO&lt;/strong> hoặc &lt;strong>Tech Management&lt;/strong> vốn vẫn được coi là mục tiêu nghề nghiệp cao nhất, họ phải nắm các kỹ năng cơ bản vững chắc, xử lý các công việc quản lý, tối ưu hóa công nghệ / sản phẩm và điều chỉnh kịp thời.&lt;/p>
&lt;p>Các vị trí được trả lương cao tiếp theo yêu cầu các kỹ năng đặc biệt như &lt;strong>Data&lt;/strong>, &lt;strong>Cloud&lt;/strong>, &lt;strong>DevOps&lt;/strong> hoặc &lt;strong>AI&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="https://namanh11611.github.io/p/salary/itviec_position.webp"
width="825"
height="899"
srcset="https://namanh11611.github.io/p/salary/itviec_position_hu_b8e6c8dc1ed43f6b.webp 480w, https://namanh11611.github.io/p/salary/itviec_position_hu_26a8f6fafe6cb7ab.webp 1024w"
loading="lazy"
alt="ITViec Position"
class="gallery-image"
data-flex-grow="91"
data-flex-basis="220px"
>&lt;/p>
&lt;p>Trong bảng số liệu của &lt;strong>ITViec&lt;/strong>, các vị trí trên vẫn được trả mức lương rất tốt. Nhưng đối với các dev từ 5 năm kinh nghiệm trở lên trong lĩnh vực khác (&lt;strong>Front-end&lt;/strong>, &lt;strong>Mobile&lt;/strong>), họ cũng được trả mức lương không hề kém cạnh.&lt;/p>
&lt;p>Điều này chứng minh rằng bạn không cần phải luôn chạy theo những công nghệ hot, chỉ cần bạn đủ giỏi, thì với vị trí nào, bạn cũng được trả mức lương tương xứng.&lt;/p>
&lt;h1 id="mức-lương-theo-trình-độ">Mức lương theo trình độ
&lt;/h1>&lt;p>&lt;img src="https://namanh11611.github.io/p/salary/topdev_level.webp"
width="825"
height="577"
srcset="https://namanh11611.github.io/p/salary/topdev_level_hu_43275f155cf62f0c.webp 480w, https://namanh11611.github.io/p/salary/topdev_level_hu_1c5035b2efd719f1.webp 1024w"
loading="lazy"
alt="TopDev Level"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="343px"
>&lt;/p>
&lt;p>&lt;strong>TopDev&lt;/strong> chỉ đưa ra một biểu đồ chung về mức lương theo số năm kinh nghiệm. Trong 5 năm đầu tiên, lương của lập trình viên dao động từ &lt;strong>$350&lt;/strong> (Fresher) đến dưới &lt;strong>$1.190&lt;/strong> cho Mid-Senior. Đối với các lập trình viên từ 5 năm kinh nghiệm, mức lương chênh lệch chủ yếu dựa trên vị trí và trách nhiệm đối với hoạt động kinh doanh. Giám đốc hoặc cấp cao hơn sẽ có mức lương ít nhất là &lt;strong>$2.300&lt;/strong>. Mức lương của cấp quản lý kỹ thuật sẽ cao hơn so với cấp quản lý/giám đốc theo định hướng kinh doanh.&lt;/p>
&lt;h1 id="mức-lương-theo-thành-phố">Mức lương theo thành phố
&lt;/h1>&lt;p>&lt;img src="https://namanh11611.github.io/p/salary/itviec_location.webp"
width="825"
height="578"
srcset="https://namanh11611.github.io/p/salary/itviec_location_hu_9d3b39bf1adf30d9.webp 480w, https://namanh11611.github.io/p/salary/itviec_location_hu_f572d14f40561d42.webp 1024w"
loading="lazy"
alt="ITViec Location"
class="gallery-image"
data-flex-grow="142"
data-flex-basis="342px"
>&lt;/p>
&lt;p>Có lẽ nhiều anh em cũng đã biết trước kết quả về bảng số liệu này của &lt;strong>ITViec&lt;/strong>. Nhìn chung thì mức lương ở thành phố Hồ Chí Minh cao hơn Hà Nội, và Hà Nội thì lại cao hơn Đà Nẵng.&lt;/p>
&lt;p>Theo mình có lẽ vì thành phố Hồ Chí Minh gồm nhiều công ty product và outsource làm với thị trường nói tiếng Anh hơn. Còn ở Hà Nội vẫn gồm nhiều các công ty làm cho thị trường Nhật. Tuy nhiên trong giai đoạn gần đây, đã có nhiều công ty từ thành phố Hồ Chí Minh Bắc tiến ra Hà Nội, điều đó cũng đã giúp thị trường ở Hà Nội nhộn nhịp hơn rất nhiều.&lt;/p>
&lt;h1 id="lời-kết">Lời kết
&lt;/h1>&lt;p>Cũng phải nhìn nhận rằng, những anh em không may bị sa thải trong giai đoạn này sẽ phải tìm một công việc mới và có thể phải chấp nhận một mức lương thấp hơn mức cũ. Điều đó cũng góp phần làm cho mức lương của thị trường hiện tại thấp hơn mức trong khảo sát.&lt;/p>
&lt;p>Nhưng mình hy vọng rằng dựa vào báo cáo này, anh em có thêm một góc nhìn khác về thị trường, để biết cách trau dồi bản thân, rèn luyện kỹ năng. Và sau cơn mưa trời lại sáng, khi thị trường sôi động trở lại, với những kỹ năng đã được nâng cấp, anh em sẽ nhận được một mức lương xứng đáng với năng lực.&lt;/p>
&lt;h1 id="reference">Reference
&lt;/h1>&lt;ul>
&lt;li>&lt;a class="link" href="https://topdev.vn/page/bao-cao-it-viet-nam" target="_blank" rel="noopener"
>https://topdev.vn/page/bao-cao-it-viet-nam&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://itviec.com/blog/bao-cao-luong-it" target="_blank" rel="noopener"
>https://itviec.com/blog/bao-cao-luong-it&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>